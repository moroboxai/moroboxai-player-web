(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.MoroboxAIEditorSDK = {}));
})(this, (function (exports) { 'use strict';

    const DEFAULT_LANGUAGE = "javascript";
    function createElement(tagName, className) {
        const el = document.createElement(tagName);
        if (className !== undefined) {
            el.classList.add(className);
        }
        return el;
    }
    const STYLES = {
        'root': {
            'background-color': '#1e1e1e',
            'overflow': 'hidden'
        },
        'body': {
            'width': '100%',
            'height': '100%',
            'display': 'flex',
            'flex-direction': 'column'
        },
        'toolbar': {
            'flex-grow': '1',
            'padding-left': '1em',
            'padding-right': '1em',
            'padding-top': '0.5em',
            'padding-bottom': '1em',
            'display': 'flex',
            'flex-direction': 'row',
            'gap': '0.5em'
        },
        'language': {
            'font-weight': 'bold',
            'color': '#4e6c8b',
            'flex-grow': '1',
            'text-align': 'right'
        },
        'editor': {
            'width': '100%',
            'height': '100%'
        }
    };
    class Editor {
        constructor(factory, element, options) {
            this._ui = {};
            this._factory = factory;
            this._options = options;
            this._onLoadCallback = options.onLoad;
            this._onUnloadCallback = options.onUnload;
            if (isHTMLElement(element)) {
                this._ui.element = element;
                this._options = Object.assign({}, options);
                this._attach();
            }
        }
        _attach() {
            if (this._ui.element === undefined) {
                return;
            }
            {
                const div = createElement('div', 'moroboxai-editor');
                Object.assign(div.style, STYLES['root']);
                if (this._options.width !== undefined) {
                    div.style.width = this._options.width;
                }
                if (this._options.height !== undefined) {
                    div.style.height = this._options.height;
                }
                this._ui.base = div;
                this._ui.element.appendChild(div);
            }
            {
                const body = createElement('div', 'moroboxai-body');
                Object.assign(body.style, STYLES['body']);
                this._ui.base.appendChild(body);
                {
                    const div = createElement('div', 'moroboxai-toolbar');
                    Object.assign(div.style, STYLES['toolbar']);
                    this._ui.toolbar = div;
                    body.appendChild(div);
                }
                {
                    const div = createElement('div');
                    Object.assign(div.style, STYLES['editor']);
                    this._ui.wrapper = div;
                    body.appendChild(div);
                }
            }
            {
                const input = createElement('input');
                input.type = 'button';
                input.value = 'Load';
                input.onclick = () => this._notifyLoad();
                this._ui.loadButton = input;
                this._ui.toolbar.appendChild(input);
            }
            {
                const input = createElement('input');
                input.type = 'button';
                input.value = 'Unload';
                input.onclick = () => this._notifyUnload();
                this._ui.unloadButton = input;
                this._ui.toolbar.appendChild(input);
            }
            {
                const span = createElement('span', 'moroboxai-language');
                Object.assign(span.style, STYLES['language']);
                span.textContent = 'Javascript';
                this._ui.toolbar.appendChild(span);
            }
            {
                this._ui.editor = this._factory({
                    element: this._ui.wrapper,
                    language: this._options.language || DEFAULT_LANGUAGE
                });
                this._ui.editor.value = this._options.value || '';
                this.url = this._options.url;
            }
        }
        _notifyLoad() {
            if (this._onLoadCallback) {
                this._onLoadCallback("javascript", this.value);
            }
        }
        _notifyUnload() {
            if (this._onUnloadCallback) {
                this._onUnloadCallback();
            }
        }
        // IEditor functions
        get language() {
            if (this._ui.editor !== undefined) {
                return this._ui.editor.language;
            }
            return DEFAULT_LANGUAGE;
        }
        set language(value) {
            if (this._ui.editor !== undefined) {
                this._ui.editor.language = value;
            }
        }
        get url() {
            return this._options.url;
        }
        set url(value) {
            this._options.url = value;
            if (this._options.url === undefined) {
                return;
            }
            fetch(this._options.url).then(response => response.text()).then(text => this.value = text);
        }
        get value() {
            if (this._ui.editor !== undefined) {
                return this._ui.editor.value;
            }
            return "";
        }
        set value(text) {
            if (this._ui.editor !== undefined) {
                this._ui.editor.value = text;
            }
        }
        onLoad(callback) {
            this._onLoadCallback = callback;
        }
        onUnload(callback) {
            this._onUnloadCallback = callback;
        }
        remove() {
            if (this._ui.editor !== undefined) {
                this._ui.editor.remove();
                this._ui.editor = undefined;
            }
            if (this._ui.base !== undefined) {
                this._ui.base.remove();
                this._ui.base = undefined;
            }
        }
    }
    /**
     * Get default configured editor options.
     * @returns {IEditorOptions} Default options
     */
    function defaultOptions() {
        return {
            language: DEFAULT_LANGUAGE
        };
    }
    function isEditorOptions(_) {
        return _ !== undefined && !isElementArray(_) && !("className" in _);
    }
    function isHTMLElement(_) {
        return "dataset" in _;
    }
    function isElementArray(_) {
        return "length" in _;
    }
    function createEditor(factory, element, options) {
        return new Editor(factory, element, options);
    }
    /**
     * Initialize editor on one or multiple HTML elements.
     * @param {IEditorFactory} factory How to create the editor
     * @param {HTMLElement} element Element to wrap
     * @param {IEditor} options Options for initializing the editor
     */
    function init(factory, element, options) {
        let _elements = undefined;
        let _options = defaultOptions();
        if (isEditorOptions(element)) {
            options = element;
        }
        else {
            _elements = element;
        }
        if (options !== undefined) {
            _options = Object.assign(Object.assign({}, _options), options);
        }
        if (_elements == undefined) {
            if (_options.element !== undefined) {
                _elements = _options.element;
            }
            else {
                _elements = document.getElementsByClassName("moroboxai-editor");
            }
        }
        if (!isElementArray(_elements)) {
            return createEditor(factory, _elements, _options);
        }
        return Array.prototype.map.call(_elements, _ => createEditor(factory, _, _options));
    }

    exports.DEFAULT_LANGUAGE = DEFAULT_LANGUAGE;
    exports.Editor = Editor;
    exports.defaultOptions = defaultOptions;
    exports.init = init;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
